#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May  5 16:53:46 2021

@author: josephdobos
"""
import numpy as np
import sympy as sym
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
##------SOLVING A LINEAR SYSTEM------##

#339 - 195 - 0.02s - 0.007t = 0
#399 - 225 - 0.007s - 0.02t = 0
def sol_system1():
    A = [[-0.02,-0.007],[-0.007,-0.02]]  # A is defined as a list
    # Alternatively, A can be defined as a a numpy array: A = np.array([[-0.02,-0.007],[-0.007,-0.02]])
    b = [195-339,225-399]
    x = np.linalg.solve(A,b) # Solving for Ax=b
    return(x)

##alternatively...

def sol_system2():
    s = sym.Symbol('s') 
    t = sym.Symbol('t') # declare symbolic variables
    solution = sym.solve((339 - 195 - 0.02 * s - 0.007 * t, 399 - 225 - 0.007 * s - 0.02 * t), (s, t))
    solution[s], solution[t]
    
##################################
    
##------ NEWTON'S METHOD TO FIND ROOTS OF A POLYNOMIAL------##

# f(x) = x^3 + 2x + 1

def newton_method1():
    x = np.linspace(-20, 20, 100) 
    f = x**3 + 2*x + 1
  
    #fig = plt.figure(figsize = (10, 5)) -not sure why prof included this
    # Create the plot 
    plt.plot(x, f) 
  
    # Show the plot 
    plt.show()
    
##alternatively...

def newton(f,Df,x0,epsilon,max_iter):
    #f: function we are interested in
    #Df: derivative of f
    #x0: starting point
    #epsillon: not quite sure
    #max_iter: maximum number of iterations
    '''
        Implement Newton's method: compute the linear approximation
        of f(x) at xn and find x intercept by the formula
            x = xn - f(xn)/Df(xn)
        Continue until abs(f(xn)) < epsilon and return xn.
        If Df(xn) == 0, return None.
        If the number of iterations
        exceeds max_iter, then return None.

       '''
    xn = x0
    for n in range(max_iter):
        fxn = f(xn)
        if abs(fxn) < epsilon:
            print('Found solution after',n,'iterations.')
            print('solution: ', xn)
            return xn # exit the loop
        Dfxn = Df(xn)        
        if Dfxn == 0:
            print('Zero derivative. No solution found.')
            return None # exit the loop
        xn = xn - fxn/Dfxn
    print('Exceeded maximum iterations. No solution found.') 
    # This line will not be executed unless neither of the criteria is met in max_iter steps                                   
    return None
#Uncomment the following 3 lines and edit to run newton()

#f = lambda x: x**3 + 2*x + 1 #function f
#Df = lambda x: 3*x**2 + 2 #derivative of the function f
#newton(f, Df, 5, 1e-8, 100)

## Newton's method in multivariables...
def Newton_system(F, J, x0, eps, max_iter):
    """
    Solve nonlinear system F=0 by Newton's method.
    J is the Jacobian of F. Both F and J must be functions of x.
    At input, x holds the start value. The iteration continues
    until ||F|| < eps or exceeds max_iter.
    """
    xn=x0
    for n in range(max_iter):
        Fxn = F(xn)
        if np.linalg.norm(Fxn, ord=2) < eps: # l2 norm of the vector F(xn)
            print('Found solution after',n,'iterations.')
            print('Solution: ', xn)
            return xn # exit the loop
        JFxn = J(xn)
        if np.linalg.det(JFxn) == 0: # JFxn is not invertible
            print('Zero Jacobian. No solution found.')
            return None # exit the loop
        delta = np.linalg.solve(JFxn, Fxn)
        xn = xn - delta
    print('Exceeded maximum iterations. No solution found.') 
    # This line will not be executed unless neither of the criteria is met in max_iter steps                                   
    return None

##Example of using Newton_system()
##GOAL: minimize f(x, y) = 2x^2 - (x-1)(y-2)^2 + 2y^4

#Uncomment and edit the following code to run Newton_system()

# def F(x): #x= (x,y)
#     return np.array(
#         [4*x[0] - (x[1]-2)**2,
#          -2*(x[0]-1)*(x[1]-2) + 8*x[1]**3]) #x[0]=x, x[1]=y
# def J(x):
#     return np.array(
#         [[4, -2*(x[1]-2)],
#          [-2*(x[1]-2), -2*(x[0]-1)+24*x[1]**2]])

# x0=np.array([0,0])    # (x,y)=(0,0)
    
# Newton_system(F,J,x0,0.0001,1000)

## GRAPHS IN 3D

# Goal: Graph f(x,y)












